name: 'Create Release'
description: 'Create a GitHub release with auto-generated release notes'
author: 'PipeCraft'

inputs:
  version:
    description: 'Version to release (e.g., v1.2.3)'
    required: true
  token:
    description: 'GitHub token for authentication'
    required: false
    default: ${{ github.token }}
  publish-workflow:
    description: 'Name of the publish workflow file to trigger (e.g., publish.yml)'
    required: false
    default: 'publish.yml'

outputs:
  release_url:
    description: 'The URL of the created release'
    value: ${{ steps.create.outputs.release_url }}
  release_id:
    description: 'The ID of the created release'
    value: ${{ steps.create.outputs.release_id }}

runs:
  using: 'composite'
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.token }}

    - name: Create GitHub Release
      id: create
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        VERSION="${{ inputs.version }}"
        echo "üì¶ Creating GitHub release for $VERSION"

        # Generate release notes from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "üìù Generating release notes from $PREVIOUS_TAG to HEAD"
          RELEASE_NOTES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges)
        else
          echo "üìù Generating release notes from all commits"
          RELEASE_NOTES=$(git log --pretty=format:"- %s" --no-merges)
        fi

        # Create release with notes
        RELEASE_OUTPUT=$(gh release create "$VERSION" \--title "Release $VERSION" \--notes "$RELEASE_NOTES" \--latest 2>&1)

        RELEASE_EXIT_CODE=$?

        if [ $RELEASE_EXIT_CODE -eq 0 ]; then
          # Extract release URL from output
          RELEASE_URL=$(echo "$RELEASE_OUTPUT" | grep -oE 'https://github.com/.*/releases/.*')
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

          # Get release ID using gh api
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$VERSION --jq '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

          echo "‚úÖ Release created successfully"
          echo "üîó URL: $RELEASE_URL"
        else
          echo "‚ùå Failed to create release"
          echo "$RELEASE_OUTPUT"
          exit 1
        fi

    - name: Trigger Publish Workflow (if exists)
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        VERSION="${{ inputs.version }}"
        PUBLISH_WORKFLOW="${{ inputs.publish-workflow }}"

        # Check if publish workflow file exists
        if [ -f ".github/workflows/$PUBLISH_WORKFLOW" ]; then
          echo "üîÑ Triggering $PUBLISH_WORKFLOW for $VERSION"

          # Trigger the publish workflow with the release tag
          # This is necessary because GITHUB_TOKEN release creation doesn't trigger workflows
          if gh workflow run "$PUBLISH_WORKFLOW" --field tag="$VERSION" 2>&1; then
            echo "‚úÖ Publish workflow triggered for $VERSION"
          else
            echo "‚ö†Ô∏è  Failed to trigger publish workflow, but continuing"
            echo "   Check that $PUBLISH_WORKFLOW accepts workflow_dispatch with a 'tag' input"
          fi
        else
          echo "‚ÑπÔ∏è  No $PUBLISH_WORKFLOW workflow found - skipping publish trigger"
          echo "   This is normal if you don't have a separate publish workflow"
        fi