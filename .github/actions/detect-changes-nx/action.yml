name: 'Detect Changes with Nx Support'
description: 'Enhanced change detection using Nx dependency graph with configurable domain mappings'
author: 'Pipecraft'

inputs:
  baseRef:
    description: 'Base reference to compare against'
    required: false
    default: 'main'
  useNx:
    description: 'Whether to use Nx dependency graph for change detection'
    required: false
    default: 'true'
  domainMappings:
    description: 'JSON string mapping Nx project patterns to domains'
    required: false
    default: '{"core": ["src", "libs", "apps", "core", "main"], "cicd": [".github", "workflows", "infrastructure", "ci", "cd"], "docs": ["docs", "documentation", "site", "storybook"]}'

outputs:
  core:
    description: 'Whether core domain has changes'
    value: ${{ steps.merge.outputs.core }}
  cicd:
    description: 'Whether cicd domain has changes'
    value: ${{ steps.merge.outputs.cicd }}
  docs:
    description: 'Whether docs domain has changes'
    value: ${{ steps.merge.outputs.docs }}
  nxAvailable:
    description: 'Whether Nx is available in the repository'
    value: ${{ steps.nx-check.outputs.available }}
  affectedProjects:
    description: 'Comma-separated list of affected Nx projects'
    value: ${{ steps.nx-filter.outputs.affectedProjects }}

runs:
  using: 'composite'
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set Base Branch
      id: set-base
      shell: bash
      run: |
        base_branch=${{ inputs.baseRef || 'main' }}
        echo "base_branch=$base_branch" >> $GITHUB_OUTPUT
        echo "base_branch=$base_branch" >> $GITHUB_ENV

    - name: Check for Nx
      id: nx-check
      shell: bash
      run: |
        if [ -f "nx.json" ] || ([ -f "package.json" ] && grep -q '"nx"' package.json); then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "üîç Nx detected in repository"
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  Nx not detected, falling back to path-based detection"
        fi

    - name: Detect Changes with Nx (if available)
      id: nx-filter
      if: steps.nx-check.outputs.available == 'true' && inputs.useNx == 'true'
      shell: bash
      run: |
        echo "üöÄ Using Nx dependency graph for change detection"
        
        # Parse domain mappings
        DOMAIN_MAPPINGS='${{ inputs.domainMappings }}'
        echo "üìã Domain mappings: $DOMAIN_MAPPINGS"
        
        # Get affected projects using Nx
        if command -v npx >/dev/null 2>&1; then
          # Get list of affected projects
          AFFECTED_PROJECTS=$(npx nx show projects --affected --base=${{ steps.set-base.outputs.base_branch }} 2>/dev/null || echo "")
          echo "affectedProjects=$AFFECTED_PROJECTS" >> $GITHUB_OUTPUT
          
          if [ -n "$AFFECTED_PROJECTS" ]; then
            echo "üì¶ Affected Nx projects: $AFFECTED_PROJECTS"
            
            # Initialize domain flags
            CORE_AFFECTED=false
            CICD_AFFECTED=false
            DOCS_AFFECTED=false
            
            # Check each affected project against domain patterns
            IFS=',' read -ra PROJECTS <<< "$AFFECTED_PROJECTS"
            for project in "${PROJECTS[@]}"; do
              project=$(echo "$project" | xargs) # trim whitespace
              
              # Check core domain patterns
              if echo "$project" | grep -qE "(src|libs|apps|core|main|api|web|frontend|backend)"; then
                CORE_AFFECTED=true
                echo "  ‚úÖ $project matches core domain"
              fi
              
              # Check CI/CD domain patterns  
              if echo "$project" | grep -qE "(\.github|workflows|infrastructure|ci|cd|deploy|pipeline)"; then
                CICD_AFFECTED=true
                echo "  ‚úÖ $project matches cicd domain"
              fi
              
              # Check docs domain patterns
              if echo "$project" | grep -qE "(docs|documentation|site|storybook|guide|readme)"; then
                DOCS_AFFECTED=true
                echo "  ‚úÖ $project matches docs domain"
              fi
            done
            
            # Set outputs
            echo "core=$CORE_AFFECTED" >> $GITHUB_OUTPUT
            echo "cicd=$CICD_AFFECTED" >> $GITHUB_OUTPUT
            echo "docs=$DOCS_AFFECTED" >> $GITHUB_OUTPUT
            
          else
            echo "No affected projects detected"
            echo "core=false" >> $GITHUB_OUTPUT
            echo "cicd=false" >> $GITHUB_OUTPUT
            echo "docs=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ö†Ô∏è  npx not available, falling back to path-based detection"
          echo "core=false" >> $GITHUB_OUTPUT
          echo "cicd=false" >> $GITHUB_OUTPUT
          echo "docs=false" >> $GITHUB_OUTPUT
          echo "affectedProjects=" >> $GITHUB_OUTPUT
        fi

    - name: Detect Changes with Paths Filter (fallback)
      uses: dorny/paths-filter@v3
      id: filter
      if: steps.nx-check.outputs.available != 'true' || inputs.useNx != 'true'
      with:
        base: ${{ steps.set-base.outputs.base_branch }}
        filters: |
          core:
            - 'src/**'
            - 'libs/**'
            - 'apps/**'
            - 'packages/**'
            - 'lib/**'
          cicd:
            - '.github/**'
            - 'infrastructure/**'
            - 'workflows/**'
            - 'ci/**'
          docs:
            - 'docs/**'
            - 'documentation/**'
            - 'site/**'
            - 'storybook/**'

    - name: Merge filter outputs
      id: merge
      shell: bash
      run: |
        # Use Nx results if available, otherwise use path filter results
        if [ "${{ steps.nx-check.outputs.available }}" == "true" ] && [ "${{ inputs.useNx }}" == "true" ]; then
          echo "core=${{ steps.nx-filter.outputs.core }}" >> $GITHUB_OUTPUT
          echo "cicd=${{ steps.nx-filter.outputs.cicd }}" >> $GITHUB_OUTPUT
          echo "docs=${{ steps.nx-filter.outputs.docs }}" >> $GITHUB_OUTPUT
          echo "üîç Using Nx dependency analysis results"
          echo "üì¶ Affected projects: ${{ steps.nx-filter.outputs.affectedProjects }}"
        else
          echo "core=${{ contains(steps.filter.outputs.changes, 'core') }}" >> $GITHUB_OUTPUT
          echo "cicd=${{ contains(steps.filter.outputs.changes, 'cicd') }}" >> $GITHUB_OUTPUT
          echo "docs=${{ contains(steps.filter.outputs.changes, 'docs') }}" >> $GITHUB_OUTPUT
          echo "üìÅ Using path-based change detection"
        fi
        
        echo "üìã Change Detection Results:"
        echo "  core: ${{ steps.merge.outputs.core }}"
        echo "  cicd: ${{ steps.merge.outputs.cicd }}"
        echo "  docs: ${{ steps.merge.outputs.docs }}"
        echo "  nx-available: ${{ steps.nx-check.outputs.available }}"
