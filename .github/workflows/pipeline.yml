#=============================================================================
# PIPECRAFT MANAGED WORKFLOW
#=============================================================================

# ‚úÖ YOU CAN CUSTOMIZE:
#   - test-*** jobs for each domain
#   - deploy-*** jobs for each domain
#   - remote-test-*** jobs for each domain
#   - Workflow name

# ‚ö†Ô∏è  PIPECRAFT MANAGES (do not modify):
#   - Workflow triggers, job dependencies, and conditionals
#   - Changes detection, version calculation, and tag creation
#   - CreatePR, branch management, promote, and release jobs

# Running 'pipecraft generate' updates managed sections while preserving
# your customizations in test/deploy/remote-test jobs.

# üìñ Learn more: https://docs.pipecraft.dev
#=============================================================================
name: Pipeline

run-name: "${{ github.ref_name }} #${{ inputs.run_number || github.run_number }}${{ inputs.version && format(' - {0}', inputs.version) || '' }}"
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
jobs:
  #=============================================================================
  # CHANGES DETECTION (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # This job detects which domains have changed and sets outputs for downstream jobs.
  changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      cicd: ${{ steps.detect.outputs.cicd }}
      core: ${{ steps.detect.outputs.core }}
      test: ${{ steps.detect.outputs.test }}
      docs: ${{ steps.detect.outputs.docs }}

  #=============================================================================
  # TESTING JOBS
  #=============================================================================
  test-cicd:
    needs: changes
    if: ${{ needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate pipeline workflow
        run: node tests/tools/validation/validate-pipeline.cjs

  test-core:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test:run tests/unit

      - name: Run integration tests
        run: pnpm run test:run tests/integration
        
      - name: Run e2e tests
        run: pnpm run test:run tests/e2e

  test-docs:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd docs-site && pnpm install --frozen-lockfile

      - name: Build TypeScript
        run: pnpm run build

      - name: Generate API Documentation
        run: cd docs-site && pnpm run typedoc

      - name: Build Docusaurus site
        run: cd docs-site && pnpm run build
        env:
          NODE_ENV: production

  #=============================================================================
  # VERSIONING (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Calculates the next version based on conventional commits and semver rules.
  # Only runs on push events (skipped on pull requests).
  version:
    if: ${{
        always() &&
        github.event_name != 'pull_request' &&
        (
        needs.test-cicd.result == 'success' ||
        needs.test-core.result == 'success' ||
        needs.test-docs.result == 'success'
      ) &&
        needs.test-cicd.result != 'failure' &&
        needs.test-core.result != 'failure' &&
        needs.test-docs.result != 'failure'
      }}
    needs: [ changes, test-cicd, test-core, test-docs ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/calculate-version
        id: version
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      version: ${{ steps.version.outputs.version }}

  #=============================================================================
  # DEPLOYMENT JOBS
  #=============================================================================
  deploy-core:
    needs: [ version, changes ]
    if: ${{ always() && needs.version.result == 'success' && needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy core
        run: |
          echo "Deploying core"
          echo "Replace this with your actual deploy commands"
          # Example: npm deploy -- --testPathPattern=core

  deploy-docs:
    needs: [ version, changes ]
    if: ${{ always() && needs.version.result == 'success' && needs.changes.outputs.docs == 'true' && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd docs-site && pnpm install --frozen-lockfile

      - name: Build TypeScript
        run: pnpm run build

      - name: Generate API Documentation
        run: cd docs-site && pnpm run typedoc

      - name: Build Docusaurus site
        run: cd docs-site && pnpm run build
        env:
          NODE_ENV: production

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site/build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  #=============================================================================
  # REMOTE TESTING JOBS
  #=============================================================================
  remote-test-core:
    needs: [ deploy-core, changes, test-cicd, test-core, test-docs ]
    if: ${{ always() && needs.deploy-core.result == 'success' && needs.changes.outputs.core == 'true' && needs.test-cicd.result != 'failure' && needs.test-core.result != 'failure' && needs.test-docs.result != 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Test core
        if: ${{ needs.changes.outputs.core == 'true' && needs.deploy-core.result == 'success' }}
        run: |
          echo "Testing core remotely"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core

  #=============================================================================
  # TAG & PROMOTE (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates a git tag with the calculated version on the initial branch.
  # Only runs on push events after successful tests and deployments.
  tag:
    # Needs all deploy and/or remote test jobs to succeed or be skipped
    # Needs at least one domain to succeed
    needs: [ version, deploy-core, deploy-docs, remote-test-core ]
    if: ${{
        always() &&
        github.event_name != 'pull_request' &&
        github.ref_name == 'develop' &&
        needs.version.result == 'success' &&
        (
        needs.deploy-core.result != 'failure' &&
        needs.deploy-docs.result != 'failure' &&
        needs.remote-test-core.result != 'failure'
      ) &&
        (
        needs.deploy-core.result == 'success' ||
        needs.deploy-docs.result == 'success' ||
        needs.remote-test-core.result == 'success'
      )
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/create-tag
        with:
          version: ${{ needs.version.outputs.version }}

  #=============================================================================
  # PROMOTION JOB (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Triggers the next branch's workflow after successful versioning and tagging.
  # Passes version and run_number to maintain traceability across branches.
  promote:
    # Only runs on push or manual workflow_dispatch events to branches that can promote
    # Requires version to succeed (which means tests passed)
    # Needs all deploy and/or remote test jobs to succeed
    if: ${{
        always() &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.version.result == 'success' &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      ) &&
        (
        github.ref_name == 'develop' ||
        github.ref_name == 'staging'
      )
      }}
    needs: [ version, tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/promote-branch
        with:
          sourceBranch: ${{ github.ref_name }}
          version: ${{ needs.version.outputs.version }}
          run_number: ${{ inputs.run_number || github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}

  #=============================================================================
  # RELEASE JOB (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates a GitHub release on the final branch with release notes.
  # Only runs after successful versioning and tagging on the final branch.
  release:
    # Create GitHub release on main branch after successful tests and versioning
    if: ${{
        always() &&
        github.ref_name == 'main' &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      )
      }}
    needs: [ version, tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/create-release
        with:
          version: ${{ needs.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
