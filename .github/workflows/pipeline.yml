#=============================================================================
# PIPECRAFT MANAGED WORKFLOW
#=============================================================================

# ‚úÖ YOU CAN CUSTOMIZE:
#   - Custom jobs between the '# <--START CUSTOM JOBS-->' and '# <--END CUSTOM JOBS-->' comment markers
#   - Workflow name

# ‚ö†Ô∏è  PIPECRAFT MANAGES (do not modify):
#   - Workflow triggers, job dependencies, and conditionals
#   - Changes detection, version calculation, and tag creation
#   - Tag, promote, and release jobs

# üìå VERSION PROMOTION BEHAVIOR:
#   - Only commits that trigger a version bump will promote to staging/main
#   - Non-versioned commits (test, build, etc.) remain on develop
#   - This keeps staging/main aligned with tagged releases

# Running 'pipecraft generate' updates managed sections while preserving
# your customizations in test/deploy/remote-test jobs.

# üìñ Learn more: https://pipecraft.thecraftlab.dev
#=============================================================================

name: Pipeline

run-name: "${{ github.event_name == 'pull_request' && !contains('develop,staging,main', github.head_ref) && github.event.pull_request.title || github.ref_name }} #${{ inputs.run_number || github.run_number }}${{ inputs.version && format(' - {0}', inputs.version) || '' }}"

#Git fetch depth configuration
# - FETCH_DEPTH_AFFECTED: For change detection and Nx affected analysis
#   Lower values (50-100) improve performance, higher values (200+) improve accuracy
#   Use 0 for complete history if your branches diverge significantly
# - FETCH_DEPTH_VERSIONING: For semantic version calculation (needs git tags)
#   Should almost always be 0 to access all tags

#Runtime versions
# Update these to match your project's requirements without regenerating workflows
env:
  FETCH_DEPTH_AFFECTED: "100"
  FETCH_DEPTH_VERSIONING: "0"
  NODE_VERSION: "24"
  PNPM_VERSION: "10"

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
      commitSha:
        description: The exact commit SHA to checkout and test
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
      commitSha:
        description: The exact commit SHA to checkout and test
        required: false
        type: string
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
jobs:
  
  #=============================================================================
  # CHANGES DETECTION (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # This job detects which domains have changed.
  # Domain definitions are baked into this file at generation time.
  # Run 'pipecraft generate' to update when domains change in .pipecraftrc.

  changes:
    runs-on: ubuntu-latest
    env:
      # Domain configuration (regenerated by pipecraft generate)
      DOMAINS: |
        cicd:
          paths:
          - '.github/**'
        core:
          paths:
          - 'src/**'
          - 'tests/**'
        docs:
          paths:
          - 'docs/**'
          - 'docs-site/**'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH_AFFECTED }}
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
          domains-config: ${{ env.DOMAINS }}
          useNx: 'false'
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
    outputs:
      cicd: ${{ fromJSON(steps.detect.outputs.changes).cicd }}
      core: ${{ fromJSON(steps.detect.outputs.changes).core }}
      docs: ${{ fromJSON(steps.detect.outputs.changes).docs }}
      changes: ${{ steps.detect.outputs.changes }}
      affectedDomains: ${{ steps.detect.outputs.affectedDomains }}
      nxAvailable: ${{ steps.detect.outputs.nxAvailable }}
      affectedProjects: ${{ steps.detect.outputs.affectedProjects }}

  #=============================================================================
  # VERSIONING (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Calculates the next semantic version based on conventional commits.
  # Only runs on push events (skipped on pull requests).

  version:
    needs: [ changes ]
    if: ${{ always() && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH_VERSIONING }}
      - uses: ./.github/actions/calculate-version
        id: version
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
          commitSha: ${{ inputs.commitSha || github.sha }}
          node-version: ${{ env.NODE_VERSION }}
    outputs:
      version: ${{ steps.version.outputs.version }}

  # <--START CUSTOM JOBS-->

  lint:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      - uses: ./.github/actions/lint
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          eslint: 'true'
          prettier: 'true'

  test-cicd:
    needs: changes
    if: ${{ needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your cicd test logic
      - name: Run cicd tests
        run: |
          echo "Running tests for cicd domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=cicd

  test-core:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core test logic
      - name: Run core tests
        run: |
          echo "Running tests for core domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core

  test-docs:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your docs test logic
      - name: Run docs tests
        run: |
          echo "Running tests for docs domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=docs

  deploy-core:
    needs:
      - version
      - changes
    if: ${{
        always() &&
        needs.version.result == 'success' &&
        needs.changes.outputs.core == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core deployment logic
      - name: Deploy core
        run: |
          echo "Deploying core with version ${{ needs.version.outputs.version }}"
          echo "Replace this with your actual deploy commands"
          # Example: npm run deploy:core

  deploy-docs:
    needs:
      - version
      - changes
    if: ${{
        always() &&
        needs.version.result == 'success' &&
        needs.changes.outputs.docs == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your docs deployment logic
      - name: Deploy docs
        run: |
          echo "Deploying docs with version ${{ needs.version.outputs.version }}"
          echo "Replace this with your actual deploy commands"
          # Example: npm run deploy:docs

  remote-test-core:
    needs:
      - deploy-core
      - changes
    if: ${{
        needs.changes.outputs.core == 'true' &&
        needs.deploy-core.result == 'success'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core remote testing logic
      - name: Test core remotely
        run: |
          echo "Testing core remotely"
          echo "Replace this with your actual remote test commands"
          # Example: npm run test:remote:core

  # <--END CUSTOM JOBS-->

  #=============================================================================
  # TAG (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates git tags and promotes code through branch flow.

  tag:
    needs: [ version ]
    if: ${{
        always() &&
        github.event_name != 'pull_request' &&
        github.ref_name == 'develop' &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != ''
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH_VERSIONING }}
      - uses: ./.github/actions/create-tag
        with:
          version: ${{ needs.version.outputs.version }}
          commitSha: ${{ inputs.commitSha || github.sha }}

  #=============================================================================
  # PROMOTE (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Promotes code from develop to staging or main via PR.

  promote:
    needs: [ version, tag ]
    if: ${{
        always() &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      ) &&
        (
        github.ref_name == 'develop' ||
        github.ref_name == 'staging'
      )
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH_VERSIONING }}
      - uses: ./.github/actions/promote-branch
        with:
          version: ${{ needs.version.outputs.version }}
          sourceBranch: ${{ github.ref_name }}
          targetBranch: ${{ github.ref_name == 'develop' && 'staging' || 'main' }}
          autoMerge: ${{ github.ref_name == 'develop' && 'true' || 'true' }}
          run_number: ${{ github.run_number }}

  #=============================================================================
  # RELEASE (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates a release for the version.

  release:
    needs: [ tag, version ]
    if: ${{
        always() &&
        github.ref_name == 'main' &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        needs.tag.result == 'success'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH_VERSIONING }}
      - uses: ./.github/actions/create-release
        with:
          version: ${{ needs.version.outputs.version }}
          commitSha: ${{ inputs.commitSha || github.sha }}
