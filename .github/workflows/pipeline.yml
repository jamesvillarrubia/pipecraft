#=============================================================================
# PIPECRAFT MANAGED WORKFLOW
#=============================================================================

# ‚úÖ YOU CAN CUSTOMIZE:
#   - test-*** jobs for each domain
#   - deploy-*** jobs for each domain
#   - remote-test-*** jobs for each domain
#   - Workflow name

# ‚ö†Ô∏è  PIPECRAFT MANAGES (do not modify):
#   - Workflow triggers, job dependencies, and conditionals
#   - Changes detection, version calculation, and tag creation
#   - CreatePR, branch management, promote, and release jobs

# üìå VERSION PROMOTION BEHAVIOR:
#   - Only commits that trigger a version bump will promote to staging/main
#   - Non-versioned commits (test, build, etc.) remain on develop
#   - This keeps staging/main aligned with tagged releases

# Running 'pipecraft generate' updates managed sections while preserving
# your customizations in test/deploy/remote-test jobs.

# üìñ Learn more: https://docs.pipecraft.dev
#=============================================================================

name: Pipeline

run-name: "${{ github.event_name == 'pull_request' && !contains('develop,staging,main', github.head_ref) && github.event.pull_request.title || github.ref_name }} #${{ inputs.run_number || github.run_number }}${{ inputs.version && format(' - {0}', inputs.version) || '' }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
      commitSha:
        description: The exact commit SHA to checkout and test
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: The version to deploy
        required: false
        type: string
      baseRef:
        description: The base reference for comparison
        required: false
        type: string
      run_number:
        description: The original run number from develop branch
        required: false
        type: string
      commitSha:
        description: The exact commit SHA to checkout and test
        required: false
        type: string
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
jobs:
  #=============================================================================
  # CHANGES DETECTION (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # This job detects which domains have changed and sets outputs for downstream jobs.

  changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
          fetch-depth: 0
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
    outputs:
      cicd: ${{ steps.detect.outputs.cicd }}
      core: ${{ steps.detect.outputs.core }}
      docs: ${{ steps.detect.outputs.docs }}
  #=============================================================================
  # TESTING JOBS (‚úÖ Customize these with your test logic)
  #=============================================================================
  # These jobs run tests for each domain when changes are detected.
  # Replace the TODO comments with your actual test commands.

  test-cicd:
    needs: changes
    if: ${{ needs.changes.outputs.cicd == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your cicd test logic
      - name: Run cicd tests
        run: |
          echo "Running tests for cicd domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=cicd
  test-core:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core test logic
      - name: Run core tests
        run: |
          echo "Running tests for core domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=core
  test-docs:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your docs test logic
      - name: Run docs tests
        run: |
          echo "Running tests for docs domain"
          echo "Replace this with your actual test commands"
          # Example: npm test -- --testPathPattern=docs
  #=============================================================================
  # VERSIONING (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Calculates the next semantic version based on conventional commits.
  # Only runs on push events (skipped on pull requests).

  version:
    if: ${{
        always() &&
        github.event_name != 'pull_request' &&
        (
        needs.test-cicd.result == 'success' ||
        needs.test-core.result == 'success' ||
        needs.test-docs.result == 'success'
      ) &&
        needs.test-cicd.result != 'failure' &&
        needs.test-core.result != 'failure' &&
        needs.test-docs.result != 'failure'
      }}
    needs:
      - changes
      - test-cicd
      - test-core
      - test-docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      - uses: ./.github/actions/calculate-version
        id: version
        with:
          baseRef: ${{ inputs.baseRef || 'main' }}
          commitSha: ${{ inputs.commitSha || github.sha }}
    outputs:
      version: ${{ steps.version.outputs.version }}
  #=============================================================================
  # DEPLOYMENT JOBS (‚úÖ Customize these with your deploy logic)
  #=============================================================================
  # These jobs deploy each domain when changes are detected and tests pass.
  # Replace the TODO commands with your actual deployment commands.

  deploy-core:
    needs:
      - version
      - changes
    if: ${{
        always() &&
        needs.version.result == 'success' &&
        needs.changes.outputs.core == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core deployment logic
      - name: Deploy core
        run: |
          echo "Deploying core with version ${{ needs.version.outputs.version }}"
          echo "Replace this with your actual deploy commands"
          # Example: npm run deploy:core
  deploy-docs:
    needs:
      - version
      - changes
    if: ${{
        always() &&
        needs.version.result == 'success' &&
        needs.changes.outputs.docs == 'true'
      }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your docs deployment logic
      - name: Deploy docs
        run: |
          echo "Deploying docs with version ${{ needs.version.outputs.version }}"
          echo "Replace this with your actual deploy commands"
          # Example: npm run deploy:docs
  #=============================================================================
  # REMOTE TESTING JOBS (‚úÖ Customize these with your remote test logic)
  #=============================================================================
  # These jobs test deployed services remotely after deployment succeeds.
  # Replace the TODO comments with your actual remote testing commands.

  remote-test-core:
    needs:
      - deploy-core
      - changes
    if: ${{ needs.changes.outputs.core == 'true' && needs.deploy-core.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      # TODO: Replace with your core remote testing logic
      - name: Test core remotely
        run: |
          echo "Testing core remotely"
          echo "Replace this with your actual remote test commands"
          # Example: npm run test:remote:core
  #=============================================================================
  # TAG (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates git tags and promotes code through branch flow.

  tag:
    if: ${{
        always() &&
        github.event_name != 'pull_request' &&
        github.ref_name == 'develop' &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        (
        needs.deploy-core.result != 'failure' &&
        needs.deploy-docs.result != 'failure' &&
        needs.remote-test-core.result != 'failure'
      ) &&
        (
        needs.deploy-core.result == 'success' ||
        needs.deploy-docs.result == 'success' ||
        needs.remote-test-core.result == 'success'
      )
      }}
    needs:
      - version
      - deploy-core
      - deploy-docs
      - remote-test-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      - uses: ./.github/actions/create-tag
        with:
          version: ${{ needs.version.outputs.version }}
          commitSha: ${{ inputs.commitSha || github.sha }}
  #=============================================================================
  # PROMOTE (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Promotes code from develop to staging or main via PR.

  promote:
    if: ${{
        always() &&
        (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      ) &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        (
        needs.tag.result == 'success' ||
        needs.tag.result == 'skipped'
      ) &&
        (
        github.ref_name == 'develop' ||
        github.ref_name == 'staging'
      )
      }}
    needs:
      - version
      - tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      - uses: ./.github/actions/promote-branch
        with:
          version: ${{ needs.version.outputs.version }}
          currentBranch: ${{ github.ref_name }}
          nextBranch: ${{ github.ref_name == 'develop' && 'staging' || 'main' }}
          runNumber: ${{ github.run_number }}
  #=============================================================================
  # RELEASE (‚ö†Ô∏è  Managed by Pipecraft - do not modify)
  #=============================================================================
  # Creates a release for the version.

  release:
    if: ${{
        always() &&
        github.ref_name == 'main' &&
        needs.version.result == 'success' &&
        needs.version.outputs.version != '' &&
        needs.tag.result == 'success'
      }}
    needs:
      - tag
      - version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitSha || github.sha }}
      - uses: ./.github/actions/create-release
        with:
          version: ${{ needs.version.outputs.version }}
          commitSha: ${{ inputs.commitSha || github.sha }}
