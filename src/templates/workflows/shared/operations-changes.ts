/**
 * Shared Changes Detection Job Operations
 *
 * Generates the changes detection job that identifies which domains have changed.
 * Supports both Nx-based detection (using dependency graph) and path-based detection.
 *
 * **Pipeline-Embedded Approach:**
 * - Domain definitions are BAKED INTO the pipeline file at generation time
 * - The detect-changes action is generic and reusable
 * - When domains change in .pipecraftrc, regenerate to update the pipeline
 * - Actions themselves never change
 */

import {
  createValueFromString,
  type PathOperationConfig
} from '../../../utils/ast-path-operations.js'

export interface ChangesContext {
  domains: Record<string, any>
  useNx?: boolean
  baseRef?: string
}

/**
 * Create the changes detection job operation.
 *
 * Embeds domain configuration directly into the pipeline YAML at generation time.
 * The detect-changes action receives this as structured input.
 */
export function createChangesJobOperation(ctx: ChangesContext): PathOperationConfig {
  const { domains, useNx = false, baseRef = 'main' } = ctx
  const sortedDomains = Object.keys(domains).sort()

  const comment = `
=============================================================================
 CHANGES DETECTION (⚠️  Managed by Pipecraft - do not modify)
=============================================================================
 This job detects which domains have changed.
 Domain definitions are baked into this file at generation time.
 Run 'pipecraft generate' to update when domains change in .pipecraftrc.
`

  // Generate individual domain outputs by parsing the JSON changes output
  const outputsSection = sortedDomains
    .map(domain => `      ${domain}: \${{ fromJSON(steps.detect.outputs.changes).${domain} }}`)
    .join('\n')

  // Build domain configuration as YAML that will be embedded in the pipeline
  // This gets regenerated when running pipecraft generate
  const domainsYaml = sortedDomains
    .map(domainName => {
      const domain = domains[domainName]
      const pathsYaml = domain.paths.map((path: string) => `              - '${path}'`).join('\n')
      return `            ${domainName}:\n              paths:\n${pathsYaml}`
    })
    .join('\n')

  return {
    path: 'jobs.changes',
    operation: 'overwrite',
    spaceBefore: true,
    commentBefore: comment,
    value: createValueFromString(`
    runs-on: ubuntu-latest
    env:
      # Domain configuration (regenerated by pipecraft generate)
      DOMAINS: |
${domainsYaml}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: \${{ inputs.commitSha || github.sha }}
          fetch-depth: \${{ env.FETCH_DEPTH_AFFECTED }}
      - uses: ./.github/actions/detect-changes
        id: detect
        with:
          baseRef: \${{ inputs.baseRef || '${baseRef}' }}
          domains-config: \${{ env.DOMAINS }}
          useNx: '${useNx ? 'true' : 'false'}'
          node-version: \${{ env.NODE_VERSION }}
          pnpm-version: \${{ env.PNPM_VERSION }}
    outputs:
${outputsSection}
      changes: \${{ steps.detect.outputs.changes }}
      affectedDomains: \${{ steps.detect.outputs.affectedDomains }}
      nxAvailable: \${{ steps.detect.outputs.nxAvailable }}
      affectedProjects: \${{ steps.detect.outputs.affectedProjects }}
  `)
  }
}
